}
res_test
i = 1
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1]
df_results[i, "specie_2"] = species_combi_i[2]
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
res_test
# for loop to test all combination
for(i in seq(dim(all_combination_of_2)[2])){
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1]
df_results[i, "specie_2"] = species_combi_i[2]
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
}
df_results
# perform a test for each combination of 2 species
df_results = data.frame("specie_1", "specie_2", "p_value", "mean_specie_1", "mean_specie_2")
all_combination_of_2 = combn(unique(df$species), 2)
# for loop to test all combination
for(i in seq(dim(all_combination_of_2)[2])){
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1]
df_results[i, "specie_2"] = species_combi_i[2]
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
}
df_results
# perform a test for each combination of 2 species
df_results = data.frame("specie_1"=NA, "specie_2"=NA, "p_value"=NA, "mean_specie_1"=NA, "mean_specie_2"=NA)
all_combination_of_2 = combn(unique(df$species), 2)
# for loop to test all combination
for(i in seq(dim(all_combination_of_2)[2])){
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1]
df_results[i, "specie_2"] = species_combi_i[2]
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
}
df_results
species_combi_i
i=1
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
species_combi_i[1]
name(species_combi_i[1])
species_combi_i[1]
df_results[i, "specie_1"] = species_combi_i[1] %>% as.character()
df_results[i, "specie_2"] = species_combi_i[2]  %>% as.character()
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
# for loop to test all combination
for(i in seq(dim(all_combination_of_2)[2])){
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1] %>% as.character()
df_results[i, "specie_2"] = species_combi_i[2]  %>% as.character()
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
}
df_results
# correct p value
df_results$p_value_corrected = p.adjust(df_results$p_value, method = "BH")
df_results
# load data and libraries
library(palmerpenguins)
library(dplyr)
# load data
df = palmerpenguins::penguins
# Represent graphically
boxplot(df$bill_length_mm ~ df$species)
# test that the bill length have the same location between species
kruskal.test(bill_length_mm~species, data =df)
# perform a test for each combination of 2 species
df_results = data.frame("specie_1"=NA, "specie_2"=NA, "p_value"=NA, "mean_specie_1"=NA, "mean_specie_2"=NA)
all_combination_of_2 = combn(unique(df$species), 2)
# for loop to test all combination
for(i in seq(dim(all_combination_of_2)[2])){
species_combi_i = all_combination_of_2[,i]
vec_specie_1  = df %>% filter(species %in% species_combi_i[1]) %>% pull(bill_length_mm) %>% na.omit()
vec_specie_2 = df %>% filter(species %in% species_combi_i[2]) %>% pull(bill_length_mm) %>% na.omit()
df_results[i, "specie_1"] = species_combi_i[1] %>% as.character()
df_results[i, "specie_2"] = species_combi_i[2]  %>% as.character()
df_results[i, "mean_specie_1"] = mean(vec_specie_1)
df_results[i, "mean_specie_2"] =  mean(vec_specie_2)
res_test = wilcox.test(x = vec_specie_1, y = vec_specie_2)
df_results[i, "p_value"] = res_test$p.value
}
# correct p value
df_results$p_value_corrected = p.adjust(df_results$p_value, method = "BH")
df_results
(grand_slam_win = c(9, 15, 5, 12, 18))
(grand_slam_win = c(9, 15, 5, 12, 18))
attr(grand_slam_win, "date") <- "07-15-2017"
attr(grand_slam_win, "type") <- "Men, Singles"
grand_slam_win
attr(grand_slam_win, "date")
attr(grand_slam_win)
attributes(grand_slam_win)
(grand_slam_win <- c("Andy Murray" = 9, "Rafael Nadal" = 15,
"Stan Wawrinka" = 5, "Novak Djokovic" = 12,
"Roger Federer" = 18))
grand_slam_win
(grand_slam_win = c(9, 15, 5, 12, 18))
(grand_slam_win <- c("Andy Murray" = 9, "Rafael Nadal" = 15,
"Stan Wawrinka" = 5, "Novak Djokovic" = 12,
"Roger Federer" = 18))
names(grand_slam_win)
grand_slam_win[2]
grand_slam_win["Rafael Nadal"]
grand_slam_win[c(1,3,5)]
grand_slam_win[-c(2,4)]
grand_slam_win[c(1,3,5)][-2][2]
sd(grand_slam_win)
help sd
help(sd)
?sd
mean(grand_slam_win)
sum(grand_slam_win)
sum(grand_slam_win)/5
sum(grand_slam_win)/length(grand_slam_win)
x = c(1,3,5,8,1)
sort(x)
sort(x, decreasing = TRUE)
order(x)
x
order(x, decreasing = TRUE)
x[order(x)]
sort(x)
order(x)
x[c(1,5)]
x[c(1,5,2)]
x
median(x)
order[x]
order(x)
order(x)[2]
x[2]
n = length(x)
n
n = length(x)
n = length(x)
x_sort = sort(x)
(n + 1)/2
x_sort[(n + 1)/2]
x = c(10312, 134, 135, 241, 1)
n = length(x)
x_sort = sort(x)
x_sort[(n + 1)/2]
x[index[(n + 1)/2]]
index = order(x)
x_sort[(n + 1)/2]
x[index[(n + 1)/2]]
median(x)
# Dates
mydates = c("05/27/19", "01/15/20")
mydates2 <- as.Date(mydates, format = "%m/%d/%y")
mydates2
today()
Sys.Date()
?as.Date
as.Date(Sys.Date(), "%m/%d/%y")
as.Date(Sys.Date(), format = "%m/%d/%y")
as.Date("05/27/19", format = "%m/%d/%y")
# Dates
mydates = c("27/05/19", "15/04/20")
mydates
mydates = c("27/05/19", "15/04/20")
max(mydates)
# Dates
mydates = c("27/05/19", "15/04/20")
max(mydates)
# Dates
mydates = c("27-05-19", "15-04-20")
max(mydates)
# Dates
mydates = c("27/05/19", "15/04/20")
max(mydates)
mydates[2] - mydates[1]
mydates2 <- as.Date(mydates, format = "%d/%m/%y")
mydates2
max(mydates2)
mydates2[2] - mydates2[1]
mydates[2] + 22
mydates2 + 22
# Dates
mydates = c("27-05-19", "15-04-20")
max(mydates)
mydates[2] - mydates[1]
mydates[2] + 22
mydates2 <- as.Date(mydates, format = "%d/%m/%y")
mydates2
# Dates
mydates = c("27-05-19", "15-04-20")
max(mydates)
mydates[2] - mydates[1]
mydates[2] + 22
mydates2 <- as.Date(mydates, format = "%d/%m/%y")
mydates2
mydates2 <- as.Date(mydates, format = "%d-%m-%y")
mydates2
# Dates
mydates = c("27:05:19", "15:04:20")
max(mydates)
mydates[2] - mydates[1]
mydates[2] + 22
mydates2 <- as.Date(mydates, format = "%d:%m:%y")
mydates2
max(mydates2)
mydates2[2] - mydates2[1]
mydates2 + 22
Sys.Date()
Sys.time()
Sys.Date()
format(Sys.Date())
format(Sys.Date(), "%d-%m-%y")
format(Sys.Date(), "%D-%M-%Y")
format(Sys.Date(), "%a %b %d")
format(Sys.Date(), "%A %b %d")
format(Sys.Date(), "%A %B %d")
format(Sys.Date(), "%A %B %d, %Y")
-20:20
x = -20:20
y = x^2
plot(x, y)
plot(x, y)
plot(x, y, type = "l")
1:10
10:1
rev(1:3)
3:1
rev(rev(3:1))
(0:10)/10
x = -4:4
y = x^2
plot(x, y, type = "l")
x = (-400:400)/100
y = x^2
plot(x, y, type = "l")
x = (-400:400)/100
y = x^2
plot(x, y, type = "l")
x = -4:4
y = x^2
lines(x, y, col = 2)
x = seq(from = -4, to = 4, length.out = 5)
x
y = x^2
plot(x, y, type = "l")
x = seq(from = -4, to = 4, length.out = 50)
y = x^2
plot(x, y, type = "l")
(today <- Sys.Date())
seq(from = 10, length = 2, by = 4)
seq(from = 10, length = 3, by = 4)
seq(from = 10, length = 3, by = -4)
seq(today, length = 2, by = "-3 months")
(today <- Sys.Date())
(three_months_ago <- seq(today, length = 2, by = "-3 months")[2])
library(quantmod)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
getSymbols("AAPL", from = three_months_ago, to = today)
candleChart(AAPL, theme = 'white', type = 'candles')
candleChart(AAPL, theme = 'white', type = 'candles')
candleChart(AAPL, theme = 'white', type = 'candles')
ClCl(AAPL)
# Compute returns
AAPL_returns <- na.omit(ClCl(AAPL))
AAPL_returns
mean(AAPL_returns)
mean(AAPL_returns)*100
mean(AAPL_returns)
median(AAPL_returns)
mu <- mean(AAPL_returns)
(k <- mean((AAPL_returns - mu)^4)/(mean((AAPL_returns - mu)^2))^2 - 3)
(k <- mean((AAPL_returns - mu)^4)/(mean((AAPL_returns - mu)^2))^2 - 3)
x = seq(from = -0.1, to = 0.1, length.out = 10^4)
y = dnorm(x, mean(AAPL_returns), sd(AAPL_returns))
hist(AAPL_returns, probability = TRUE, col = "lightgrey", ylim = c(0,28))
lines(x, y, col = 2, lwd = 2)
x = seq(from = -0.1, to = 0.1, length.out = 10^4)
y = dnorm(x, mean(AAPL_returns), sd(AAPL_returns))
hist(AAPL_returns, probability = TRUE, col = "lightgrey", ylim = c(0,28))
lines(x, y, col = 2, lwd = 2)
par(mfrow = c(1,1))
hist(AAPL_returns, probability = TRUE, col = "lightgrey", ylim = c(0,28))
lines(x, y, col = 2, lwd = 2)
hist(AAPL_returns, probability = TRUE, col = "lightgrey", ylim = c(0,28))
lines(x, y, col = 2, lwd = 2)
2*(1:1000) + 1
2*(0:1000) + 1
2*(0:1000) + 1
2*(0:500) + 1
2*(0:499) + 1
seq(from = 1, to = 1000, by = 2)
seq(from = 1, to = 1000, by = 2)
2*(0:49) + 1
# 4 8 12 .... 444
seq(from = 4, to = 444, by = 4)
4*(1:111)
seq(from = 8, to = 888, by = 8)/2
# Sigmoid
x = (-200:200)/10
y = 1/(1 + exp(-x))
plot(x,y, type = "l", col="blue")
# Sigmoid
x = (-50:50)/10
y = 1/(1 + exp(-x))
plot(x,y, type = "l", col="blue")
data(mtcars)
mtcars
head(mtcars)
x = mtcars$mpg
x
hist(x)
data(mtcars)
x = mtcars$mpg
x = 0.425144*x
mean(x)
median(x)
sd(x)
var(x)
class(mtcars)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("https://github.com/SMAC-Group/idar")
install.packages("devtools")
devtools::install_github("https://github.com/SMAC-Group/idar")
library(idar)
library(idao)
# Import data
library(idar)
data(diet)
diet
head(diet)
# Import data
library(idar)
data(diet)
# Compute weight loss
diet$weight.loss = diet$initial.weight - diet$final.weight
# Select diet
posw = diet$diet.type=="B"
# Variable of interest
X = diet$weight.loss[posw]
# A first look...
head(X)
# Import data
library(idar)
data(diet)
# Compute weight loss
diet$weight.loss = diet$initial.weight - diet$final.weight
# Select diet
posw = diet$diet.type=="B"
# Variable of interest
X = diet$weight.loss[posw]
boxplot(X)
2+2
# Import data
library(idar)
data(diet)
# Compute weight loss
diet$weight.loss = diet$initial.weight - diet$final.weight
# Select diet
posw = diet$diet.type=="A"
# Variable of interest
dietA = diet$weight.loss[posw]
dietA
# Import data
library(idar)
data(diet)
# Compute weight loss
diet$weight.loss = diet$initial.weight - diet$final.weight
# Select diet
posw = diet$diet.type=="A"
# Variable of interest
dietA = diet$weight.loss[posw]
# Boxplot
boxplot_w_points(dietA)
# Histogram
hist_compare_to_normal(dietA)
R.Version()
R.Version()$version.string
install.packages("devtools")
a = list("a"=2, "b"=3)
rm(list=ls())
mylist = list("item1" = c(1,2,3), "item2" = matrix(seq(4), ncol=2))
mylist
list2env(mylist, envir = globalenv())
library(idar)
data(idar)
data(codex)
help(codex)
library(idar)
data(codex)
codex$gender
men = codex[codex$gender==1,]
library(idar)
data(codex)
men = codex[codex$gender==1,]
women = codex[codex$gender==0,]
obese = codex[codex$obese==1,]
non_obese = codex[codex$obese==0,]
styler:::style_active_file()
boxplot(obese$tmax, non_obese$tmax)
boxplot(obese$tmax, non_obese$tmax, las=2)
boxplot(obese$tmax, non_obese$tmax, las=2 names = c("Obese", "Non Obese"))
boxplot(obese$tmax, non_obese$tmax, las=2, names = c("Obese", "Non Obese"))
boxplot(obese$tmax, non_obese$tmax, las=3, names = c("Obese", "Non Obese"))
boxplot(obese$tmax, non_obese$tmax, las=4, names = c("Obese", "Non Obese"))
boxplot(obese$tmax, non_obese$tmax, las=2, names = c("Obese", "Non Obese"))
boxplot(obese$tmax, non_obese$tmax, las=1, names = c("Obese", "Non Obese"))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"))
boxplot(obese$auc, non_obese$tmax, las=1, names = c("Obese", "Non Obese"))
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"))
boxplot(men$tmax, women$tmax, las=1, names = c("Men", "Women"))
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"))
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women"))
boxplot(obese$tmax, non_obese$tmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="cmax")
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"), main="auc")
boxplot(men$tmax, women$tmax, las=1, names = c("Men", "Women"), main="tmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="cmax")
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women") , main="auc")
library(idar)
data(codex)
men <- codex[codex$gender == 1, ]
women <- codex[codex$gender == 0, ]
obese <- codex[codex$obese == 1, ]
non_obese <- codex[codex$obese == 0, ]
par(mfrow(c(1,2)))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow(c(1,2)))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow = c(1,2))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow(c(1,1)))
library(idar)
data(codex)
men <- codex[codex$gender == 1, ]
women <- codex[codex$gender == 0, ]
obese <- codex[codex$obese == 1, ]
non_obese <- codex[codex$obese == 0, ]
par(mfrow = c(1,2))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="cmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="cmax")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$tmax, non_obese$tmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$tmax, women$tmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"), main="auc")
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women") , main="auc")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"), main="auc")
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women") , main="auc")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
par(mfrow = c(1,2))
par(mfrow = c(1,2))
boxplot(obese$cmax, non_obese$cmax, las=1, names = c("Obese", "Non Obese"), main="cmax")
boxplot(men$cmax, women$cmax, las=1, names = c("Men", "Women"), main="cmax")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$tmax, non_obese$tmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$tmax, women$tmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"), main="auc")
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women") , main="auc")
par(mfrow(c(1,1)))
par(mfrow = c(1,2))
boxplot(obese$auc, non_obese$auc, las=1, names = c("Obese", "Non Obese"), main="auc")
boxplot(men$auc, women$auc, las=1, names = c("Men", "Women") , main="auc")
par(mfrow = c(1,1))
par(mfrow = c(1,2))
boxplot(obese$tmax, non_obese$tmax, las=1, names = c("Obese", "Non Obese"), main="tmax")
boxplot(men$tmax, women$tmax, las=1, names = c("Men", "Women"), main="tmax")
par(mfrow = c(1,1))
