x = list(
poll_to_predict,
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
predicted_prob
fig_1 %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
poll_to_predict,
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(predicted_prob,
highlight = FALSE)))
fig_1 %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
poll_to_predict,
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = predicted_prob))
# fit model bronchitis
library(idar)
data("bronchitis")
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
summary(mod2)
summary(bronchitis$cigs)
# do matrix of prediction
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs),
length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll),
length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i],
poll = poll_to_predict[j]), type = "response")
}
}
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
fig
fig = fig %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig = fig %>% colorbar(title = "Estimated \n probability")
mycol = c("#1a31ff", "#ff3c1a")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron, # EDIT: ~ added
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_1 %>% add_trace(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob)
poll_to_predict
cigs_to_predict
predicted_prob
fig_1 %>% add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob)
mycol = c("#1a31ff", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron, # EDIT: ~ added
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_1 %>% add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob)
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron, # EDIT: ~ added
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_1 %>% add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob)
fig_2 = fig_1 %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig_2 = fig_2 %>% colorbar(title = "Estimated \n probability")
fig_2
fig_1
fig_1 %>% add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob)
fig_1
fig_2 = fig_1 %>%
add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron, # EDIT: ~ added
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_2 = fig_1 %>%
add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig_2 = fig_2 %>% colorbar(title = "Estimated \n probability")
fig_2
# clean ws
rm(list=ls())
# load libraries
library(plotly)
library(reshape2)
# fit model bronchitis
library(idar)
data("bronchitis")
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
summary(mod2)
summary(bronchitis$cigs)
# do matrix of prediction
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs),
length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll),
length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i],
poll = poll_to_predict[j]), type = "response")
}
}
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
fig
fig = fig %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig = fig %>% colorbar(title = "Estimated \n probability")
# define colors
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
# clean ws
rm(list=ls())
# load libraries
library(plotly)
library(reshape2)
# fit model bronchitis
library(idar)
data("bronchitis")
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
summary(mod2)
summary(bronchitis$cigs)
# do matrix of prediction
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs),
length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll),
length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i],
poll = poll_to_predict[j]), type = "response")
}
}
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
# define colors
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron,
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_2 = fig_1 %>%
add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig_2 = fig_2 %>% colorbar(title = "Estimated \n probability")
fig_2
fig_2
# clean ws
rm(list=ls())
# load libraries
library(plotly)
library(reshape2)
# fit model bronchitis
library(idar)
data("bronchitis")
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
summary(mod2)
summary(bronchitis$cigs)
# do matrix of prediction
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs),
length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll),
length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i],
poll = poll_to_predict[j]), type = "response")
}
}
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
# define colors
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron,
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_2 = fig_1 %>%
add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig_2 = fig_2 %>% colorbar(title = "Estimated \n probability")
fig_2
saveWidget(fig_2, "static/fig_surface_points_logistic.html", selfcontained = T, libdir = "lib")
# clean ws
rm(list=ls())
# load libraries
library(plotly)
library(reshape2)
library(htmlwidgets)
# fit model bronchitis
library(idar)
data("bronchitis")
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
summary(mod2)
summary(bronchitis$cigs)
# do matrix of prediction
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs),
length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll),
length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i],
poll = poll_to_predict[j]), type = "response")
}
}
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
# define colors
mycol = c("#44234c", "#e7e82b")
hcolors=c(mycol)[(bronchitis$bron+1)]
hcolors
fig_1 = plot_ly(bronchitis,
x = ~poll,
y = ~cigs,
z = ~bron,
text = ~bron,
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
fig_1
fig_2 = fig_1 %>%
add_surface(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>%
layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig_2 = fig_2 %>% colorbar(title = "Estimated \n probability")
fig_2
saveWidget(fig_2, "static/fig_surface_points_logistic.html", selfcontained = T, libdir = "lib")
fig_2
saveWidget(fig_2, "static/fig_surface_points_logistic.html", selfcontained = T, libdir = "lib")
styler:::style_selection()
e^2
6*3 + 3^2 / 2 +1
6*3 + 3^2/2 + 1
a = 9
b = 12
a > b
a == b
a < b
6*3 + 3^2/2 + 1
0:12
mysequence = seq(0, 12, by = 1)
mysequence[5]
matrx(seq(4), ncol=2)
matrix(seq(4), ncol=2)
mymat = matrix(seq(4), ncol=2)
mymat[1,2]
sqrt(b)
b
b=seq(4)
sqrt(b)
A = matrix(seq(4), ncol= 2)
C = matrix(c(5:8), ncol =2)
A %*% C
df = data.frame("Name" = c("Florian", "Kevin", "Sadri", "Caroline"),
"Age" = c(21, 24, 26, 28),
"Sex" = c("M", "M", "M", "F"),
"Program" = c("Statistics", "BA", "Economics", "BA"))
str(df)
df = data.frame("name" = c("Florian", "Kevin", "Sadri", "Caroline"),
"age" = c(21, 24, 26, 28),
"weight" = c(75, 65, 78, 65),
"sport" = c("running", "boxing", "tennis", "swimming"))
df
df = data.frame("name" = c("Florian", "Kevin", "Sadri", "Caroline"),
"age" = c(21, 24, 26, 28),
"weight" = c(75, 65, 78, 65),
"height" = c(180, 165, 172, 165)
"sport" = c("running", "boxing", "tennis", "swimming"))
str(df)
df = data.frame("name" = c("Florian", "Kevin", "Sadri", "Caroline"),
"age" = c(21, 24, 26, 28),
"weight" = c(75, 65, 78, 65),
"height" = c(180, 165, 172, 165),
"sport" = c("running", "boxing", "tennis", "swimming"))
str(df)
head(df)
colnames(df)
df$weight
df$bmi = df$weight / (df$height / 100)^2
df
79/(1.78)^2
str(df)
data(mpg)
data(mtcars)
data(cortisol)
library(idar)
x=seq(-5, 5, by=.1)
y=x *sin(1/x)
plot(x,y)
plot(x,y, type="l")
x=seq(-5, 5, by=.001)
y=x *sin(1/x)
plot(x,y, type="l")
devtools::install_github("SMAC-Group/idar")
library(idar)
data(diet)
diet$weight_loss = diet$final.weight - diet$initial.weight
boxplot(diet$weight_loss)
boxplot(diet$weight_loss, main="Distribution of weight loss")
hist(diet$weight_loss, main="Distribution of weight loss")
hist(diet$weight_loss, main="Distribution of weight loss", xlab="")
x = seq(-3, 3, by=0.01)
y=x *sin(1/x)
plot(x, y, type="l")
x = seq(-2, 2, by=0.01)
```
```
plot(x, y, type="l")
x = seq(-2, 2, by=0.01)
y=x *sin(1/x)
plot(x, y, type="l")
library(idar)
data(diet)
diet
diet[diet$gender=="Male", ]
```R
diet_sub = diet[diet$gender=="Male", ]
dim(diet_sub)
dim(diet_sub)[1]
diet_sub = diet[diet$gender=="Male" & diet$diet.type=="A", ]
diet_sub
```R
diet
# subset dataset
diet_sub = diet[diet$gender == "Female" & diet$diet.type == "A", ]
diet_sub
diet
# subset dataset
diet_sub = diet[diet$initial.weight <= 70, ]
diet_sub
# subset dataset
diet_sub = diet[diet$gender=="Female" & diet$diet.type="C" & diet$final.weight < 65, ]
# subset dataset
diet_sub = diet[diet$gender=="Female" & diet$diet.type=="C" & diet$final.weight < 65, ]
diet_sub
# subset dataset
diet_sub = diet[diet$gender=="Female" & (diet$diet.type=="C" | diet$diet.type == "B") & diet$final.weight < 65, ]
diet_sub
val_1 == val_2
val_1 = TRUE
val_2 = FALSE
val_3 = NA
val_1 == val_2
val_2 == val_3
mymat = matrix(c(1,2,3,4,4,1,2,3,3,4,1,2,2,3,4,1), byrow = T, ncol=2)
mymat
mymat = matrix(c(1,2,3,4,4,1,2,3,3,4,1,2,2,3,4,1), byrow = T, ncol=4, nrow=4)
mymat
devtools::install_github("https://github.com/stephaneguerrier/ai_helper_pharma")
devtools::install_github("https://github.com/stephaneguerrier/ai_helper_pharma")
devtools::install_github("https://github.com/stephaneguerrier/ai_helper_pharma", auth_token = "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")
library(helper)
run_app()
# Load data
library(idar)
data("pharmacy")
# Construct attendance by day
monday = na.omit(pharmacy$attendance[pharmacy$weekday == "Monday"])
tuesday = na.omit(pharmacy$attendance[pharmacy$weekday == "Tuesday"])
wednesday = na.omit(pharmacy$attendance[pharmacy$weekday == "Wednesday"])
thursday = na.omit(pharmacy$attendance[pharmacy$weekday == "Thursday"])
friday = na.omit(pharmacy$attendance[pharmacy$weekday == "Friday"])
saturday = na.omit(pharmacy$attendance[pharmacy$weekday == "Saturday"])
sunday = na.omit(pharmacy$attendance[pharmacy$weekday == "Sunday"])
boxplot_w_points(monday, tuesday, wednesday, thursday,
friday, saturday, sunday,
names = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),
xlab = "Number of customers per hour",
horizontal = TRUE)
boxplot_w_points(monday, tuesday, wednesday, thursday,
friday, saturday, sunday,
names = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),
xlab = "Number of customers per hour",
horizontal = TRUE)
