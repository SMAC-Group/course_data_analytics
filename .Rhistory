Cmax_men = codex$cmax[codex$gender == 0]
Cmax_women = codex$cmax[codex$gender == 1]
Cmax_non_obese = codex$cmax[codex$obese == 0]
Cmax_obese = codex$cmax[codex$obese == 1]
# Boxplot
boxplot_w_points(Cmax_women, Cmax_men, names = c("Women", "Men"),
ylab = "Cmax (ng.h/ml)")
# Cmax by group
Tmax_men = codex$tmax[codex$gender == 1]
Tmax_women = codex$tmax[codex$gender == 0]
Tmax_obese = codex$tmax[codex$obese == 1]
Tmax_non_obese = codex$tmax[codex$obese == 1]
# Import data
library(idar)
data(codex)
# Cmax by group
Cmax_men = codex$cmax[codex$gender == 0]
Cmax_women = codex$cmax[codex$gender == 1]
Cmax_non_obese = codex$cmax[codex$obese == 0]
Cmax_obese = codex$cmax[codex$obese == 1]
# Boxplot
boxplot_w_points(Cmax_women, Cmax_men, names = c("Women", "Men"),
ylab = "Cmax (ng/ml)")
?codex
codex$id
codex$number_doses
boxplot_w_points(Cmax_obese, Cmax_non_obese, names = c("Obese", "Non-obese"), ylab = "Cmax (ng/ml)")
boxplot_w_points(spo2, ylab = "Oxygen saturation (%)")
library(idar)
data(covid)
# Extract the variable SpO2
spo2 = covid$spo2
# Extract the variable ICU
icu = covid$icu
# Select SpO2 of ICU patients
spo2_icu = spo2[icu == 1]
# Select SpO2 of non-ICU patients
spo2_not_icu = spo2[icu == 0]
# Boxplot
boxplot_w_points(spo2_not_icu, spo2_icu, names = c("No ICU", "ICU"))
library(idar)
data(covid)
# Extract the variable SpO2
spo2 = covid$spo2
# Extract the variable ICU
icu = covid$icu
# Select SpO2 of ICU patients
spo2_icu = spo2[icu == 1]
# Select SpO2 of non-ICU patients
spo2_not_icu = spo2[icu == 0]
# Perform test
wilcox.test(spo2_icu, spo2_not_icu, alternative = "less")
# Import data and compute weight loss
library(idar)
data(diet)
diet$weight.loss = diet$initial.weight - diet$final.weight
# Variable of interest
dietA = diet$weight.loss[diet$diet.type=="A"]
dietB = diet$weight.loss[diet$diet.type=="B"]
dietC = diet$weight.loss[diet$diet.type=="C"]
# Create data frame
dat = data.frame(response = c(dietA, dietB, dietC),
groups = c(rep("A", length(dietA)),
rep("B", length(dietB)),
rep("C", length(dietC))))
wilcox.test(dietA, dietC, alternative = "less")
prop.test(13, 250, p = 0.05)
dbinom(13, 250, p = 0.05)
dbinom(0:12, 250, p = 0.05)
sum(dbinom(0:12, 250, p = 0.05))
Cmax_men = codex$cmax[codex$gender == 1]
Cmax_women = codex$cmax[codex$gender == 0]
boxplot(Cmax_men, Cmax_women)
devtools::install_github("https://github.com/SMAC-Group/idar")
?codex
library(idar)
?codex
```{out}
1        2        3        4        5        6        7
38.38719 45.03286 51.67852 58.32419 64.96985 71.61552 78.26118
```
---
xaringan:::inf_mr()
xaringan:::inf_mr()
data(bronchitis)
library(idar)
data(bronchitis)
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
cv_error = vector(mode = "numeric", length = k)
# split in k-folds
# get dimension of dataset
dim(bronchitis)[1]
# split in k-folds
# get dimension of dataset
nbr_obs = dim(bronchitis)[1]
sample(1:nbr_obs, size = nbr_obs, replace = f)
all_id = sample(1:nbr_obs, size = nbr_obs, replace = F)
all_id
# split in k-folds
# get dimension of dataset
nbr_obs =
n <-  dim(bronchitis)[1]
prop <- n%/%fold
# split in k-folds
# get dimension of dataset
nbr_obs =
fold=10
fold = 10
cv_error = vector(mode = "numeric", length = fold)
n <-  dim(bronchitis)[1]
prop <- n%/%fold
prop
set.seed(7)
newseq <- rank(runif(n))
newseq
runif(n))
k <- as.factor((newseq - 1)%/%prop + 1)
k
table(k)
unlist(strsplit(as.character(form), " "))[2]
m = 40
cigs_to_predict = seq(from = min(bronchitis$cigs), to = max(bronchitis$cigs), length.out = m)
poll_to_predict = seq(from = min(bronchitis$poll), to = max(bronchitis$poll), length.out = m)
predicted_prob = matrix(NA, m, m)
for (i in 1:m){
for (j in 1:m){
predicted_prob[i,j] = predict(mod2, data.frame(cigs = cigs_to_predict[i], poll = poll_to_predict[j]), type = "response")
}
}
predicted_prob
library(plotly)
plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>% add_surface()
p_1 = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>% add_surface()
saveWidget(p, "p1.html", selfcontained = T, libdir = "lib")
library(htmlwidgets)
saveWidget(p, "p1.html", selfcontained = T, libdir = "lib")
saveWidget(p_1, "p_1.html", selfcontained = T, libdir = "lib")
fig = plot_ly(x = poll_to_predict, y = cigs_to_predict, z = predicted_prob) %>% add_surface(
contours = list(
y = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
x = list(
highlight = TRUE,
highlightcolor = "#41a7b3"
),
z = list(highlight = FALSE)))
fig = fig %>% layout(scene = list(xaxis = list(title = "Pollution index"),
yaxis = list(title = "Daily number of cigarettes"),
zaxis = list(title = "Predicted probability of Bronchitis")))
fig = fig %>% colorbar(title = "Estimated \n probability")
fig
p_2 = fig
saveWidget(p_2, "p_2.html", selfcontained = T, libdir = "lib")
getwd()
styler:::style_active_file()
styler:::style_active_file()
library(idar)
data(bronchitis)
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
fold = 10
cv_error = vector(mode = "numeric", length = fold)
n <-  dim(bronchitis)[1]
prop <- n%/%fold
set.seed(123)
newseq <- rank(runif(n))
newseq
runif(n)
rank(runif(n))
newseq
k <- as.factor((newseq - 1)%/%prop + 1)
k
y <- unlist(strsplit(as.character(form), " "))[2]
table(k)
fold_id <- as.factor((newseq - 1)%/%prop + 1)
# identify id train and test
id_train = which(fold_id == fold_i)
# identify id train and test
id_test= which(fold_id == fold_i)
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(fold_id == fold_i)
id_train
fold_i = 1
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(fold_id == fold_i)
id_train
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
id_test
id_train
fold_id
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ])
y_pred_test
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test
y_pred_test
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
# define vector to save accuracy for each fold
cv_accuracy = vector(mode = "numeric", length = fold)
cv_accuracy[fold_i] = mean(y_pred_test_bin == bronchitis[id_test, "bron"])
cv_accuracy
# define number of fold
fold = 10
# define vector to save accuracy for each fold
cv_accuracy = vector(mode = "numeric", length = fold)
# define fold id vector
n <-  dim(bronchitis)[1]
prop <- n%/%fold
set.seed(123)
newseq <- rank(runif(n))
fold_id <- as.factor((newseq - 1)%/%prop + 1)
# run cv procedure
for(fold_i in seq(fold)){
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
# compute accuracy on test set
cv_accuracy[fold_i] = mean(y_pred_test_bin == bronchitis[id_test, "bron"])
}
mean(cv_accuracy)
# define number of fold
fold = 10
# define vector to save accuracy for each fold
cv_accuracy = vector(mode = "numeric", length = fold)
# define fold id vector
n <-  dim(bronchitis)[1]
prop <- n%/%fold
set.seed(123)
newseq <- rank(runif(n))
fold_id <- as.factor((newseq - 1)%/%prop + 1)
# run cv procedure
for(fold_i in seq(fold)){
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
# compute accuracy on test set
cv_accuracy[fold_i] = mean(y_pred_test_bin == bronchitis[id_test, "bron"])
}
# Compute estimated cv accuracy
mean(cv_accuracy)
fold_id[1.10]
fold_id[1:10]
```r
# run cv procedure
for(fold_i in seq(fold)){
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
# compute accuracy on test set
cv_accuracy[fold_i] = mean(y_pred_test_bin == bronchitis[id_test, "bron"])
}
# Compute estimated cv accuracy
mean(cv_accuracy)
library(mlbench)
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
styler:::style_active_file()
load("malnutrion_zambia_cleaned.Rda")
data_zambia <- janitor::clean_names(data_zambia)
# remove factor and only keep continuous covariates
data_zambia <- data_zambia %>% dplyr::select(-c(
region_central,
region_central,
region_copperbelt,
region_eastern,
region_luapula,
region_lusaka,
region_northern,
region_northwestern,
region_southern,
region_western,
ed_no_education,
ed_primary,
ed_secondary,
ed_higher,
child_sex,
water_piped_into_dwelling,
water_piped_to_yard_plot,
water_public_tap_standpipe,
water_protected_well,
water_unprotected_well,
water_river_dam_lake_ponds_stream_canal_irrigation_channel,
water_bottled_water,
water_other
))
rm(list = ls())
library(selectiveInference)
library(dplyr)
library(tictoc)
library(SIS)
library(caret)
library(ppcor)
library(glmnet)
load("malnutrion_zambia_cleaned.Rda")
data_zambia <- janitor::clean_names(data_zambia)
# remove factor and only keep continuous covariates
data_zambia <- data_zambia %>% dplyr::select(-c(
region_central,
region_central,
region_copperbelt,
region_eastern,
region_luapula,
region_lusaka,
region_northern,
region_northwestern,
region_southern,
region_western,
ed_no_education,
ed_primary,
ed_secondary,
ed_higher,
child_sex,
water_piped_into_dwelling,
water_piped_to_yard_plot,
water_public_tap_standpipe,
water_protected_well,
water_unprotected_well,
water_river_dam_lake_ponds_stream_canal_irrigation_channel,
water_bottled_water,
water_other
))
colnames(data_zambia)
colnames(data_zambia) %>% dput()
styler:::style_active_file()
load("malnutrion_zambia_cleaned.Rda")
data_zambia <- janitor::clean_names(data_zambia)
# remove factor and only keep continuous covariates
data_zambia <- data_zambia %>% dplyr::select(c(
"height_for_age_sd", "breastfeeding_duration_months", "age_of_the_child_months",
"age_of_the_mother_years", "bmi_mother", "heigth_mother_meter",
"weight_mother_kg", "wealth_index_factor_score", "child_weight_at_birth_kg",
"interval_between_births"
))
colnames(data_zambia)
xaringan:::inf_mr()
coef_ridge <- predict(cvfit, s = "lambda.min", type = "coefficients")
coef_ridge
coef_ridge_lambda_1_se <- predict(cvfit, s = "lambda.1se", type = "coefficients")
coef_ridge
coef_ridge_lambda_se_vec <- as.vector(coef_ridge_lambda_1_se)
names(coef_ridge_lambda_se_vec) <- as.vector(coef_ridge_lambda_1_se@Dimnames)[[1]]
coef_ridge_vec <- as.vector(coef_ridge)
names(coef_ridge_vec) <- as.vector(coef_ridge@Dimnames)[[1]]
coef_ridge_lambda_se_vec <- as.vector(coef_ridge_lambda_1_se)
names(coef_ridge_lambda_se_vec) <- as.vector(coef_ridge_lambda_1_se@Dimnames)[[1]]
table_ols_ridge <- cbind(coef_lm, coef_ridge_vec, coef_ridge_lambda_se_vec)
table_ols_ridge
colnames(table_ols_ridge) <- c("OLS", "RIDGE (lambda min)", "RIDGE (lambda 1se)")
knitr::kable(table_ols_ridge)
set.seed(123)
cvfit_lasso <- cv.glmnet(X, y, alpha = 1)
coef_lasso <- predict(cvfit_lasso, s = "lambda.min", type = "coefficients")
coef_lasso
coef_lasso_vec <- as.vector(coef_lasso)
names(coef_lasso_vec) <- as.vector(coef_lasso@Dimnames)[[1]]
coef_lasso_lambda_se <- predict(cvfit_lasso, s = "lambda.1se", type = "coefficients")
coef_lasso_lambda_se
coef_lasso_vec <- as.vector(coef_lasso)
names(coef_lasso_vec) <- as.vector(coef_lasso@Dimnames)[[1]]
coef_lasso_vec <- as.vector(coef_lasso)
names(coef_lasso_vec) <- as.vector(coef_lasso@Dimnames)[[1]]
coef_lasso_lambda_se_vec <- as.vector(coef_lasso_lambda_se)
names(coef_lasso_lambda_se_vec) <- as.vector(coef_lasso_lambda_se@Dimnames)[[1]]
coef_lasso_lambda_se_vec
coef_lasso_vec <- as.vector(coef_lasso)
names(coef_lasso_vec) <- as.vector(coef_lasso@Dimnames)[[1]]
coef_lasso_lambda_se_vec <- as.vector(coef_lasso_lambda_se)
names(coef_lasso_lambda_se_vec) <- as.vector(coef_lasso_lambda_se@Dimnames)[[1]]
table_ols_ridge_lasso <- cbind(table_ols_ridge, coef_lasso_vec)
colnames(table_ols_ridge_lasso) <- c("OLS",  "RIDGE (lambda min)", "RIDGE (lambda 1se)", "LASSO (lambda min)", "LASSO (lambda 1se)")
table_ols_ridge_lasso <- cbind(table_ols_ridge, coef_lasso_vec)
table_ols_ridge_lasso
table_ols_ridge_lasso <- cbind(table_ols_ridge, coef_lasso_vec, coef_lasso_lambda_se_vec)
table_ols_ridge_lasso
colnames(table_ols_ridge_lasso) <- c("OLS",  "RIDGE (lambda min)", "RIDGE (lambda 1se)", "LASSO (lambda min)", "LASSO (lambda 1se)")
knitr::kable(table_ols_ridge_lasso)
library(idar)
data(covid)
mod_big = glm(icu ~ sex + ldh + spo2 + age, data = covid, family = binomial())
summary(mod_big)
mod1 = glm(icu ~ 1, data = covid, family = binomial())
mod1 = glm(icu ~ 1, data = covid, family = binomial())
# Models with one variable
mod2 = glm(icu ~ sex, data = covid, family = binomial())
mod3 = glm(icu ~ age, data = covid, family = binomial())
mod4 = glm(icu ~ ldh, data = covid, family = binomial())
mod5 = glm(icu ~ spo2, data = covid, family = binomial())
# Models with two variables
mod6 = glm(icu ~ sex + age, data = covid, family = binomial())
mod7 = glm(icu ~ sex + ldh, data = covid, family = binomial())
mod8 = glm(icu ~ sex + spo2, data = covid, family = binomial())
mod9 = glm(icu ~ age + ldh, data = covid, family = binomial())
mod10 = glm(icu ~ age + spo2, data = covid, family = binomial())
mod11 = glm(icu ~ ldh + spo2, data = covid, family = binomial())
# Models with three variables
mod12 = glm(icu ~ sex + age + ldh, data = covid, family = binomial())
mod13 = glm(icu ~ sex + age + spo2, data = covid, family = binomial())
mod14 = glm(icu ~ age + ldh + spo2, data = covid, family = binomial())
mod15 = glm(icu ~ sex + ldh + spo2, data = covid, family = binomial())
# Full model
mod16 = glm(icu ~ sex + age + ldh + spo2, data = covid, family = binomial())
AIC_vector = c(AIC(mod1), AIC(mod2), AIC(mod3), AIC(mod4), AIC(mod5),
AIC(mod6), AIC(mod7), AIC(mod8), AIC(mod9), AIC(mod10),
AIC(mod11), AIC(mod12), AIC(mod13), AIC(mod14), AIC(mod15),
AIC(mod16))
plot(AIC_vector, xlab = "Model index", ylab = "AIC", type = "b", pch = 16)
grid()
abline(h = min(AIC_vector))
```{r}
AIC_vector = c(AIC(mod1), AIC(mod2), AIC(mod3), AIC(mod4), AIC(mod5),
AIC(mod6), AIC(mod7), AIC(mod8), AIC(mod9), AIC(mod10),
AIC(mod11), AIC(mod12), AIC(mod13), AIC(mod14), AIC(mod15),
AIC(mod16))
plot(AIC_vector, xlab = "Model index", ylab = "AIC", type = "b", pch = 16)
grid()
abline(h = min(AIC_vector))
abline(h = min(AIC_vector)+2)
```
AIC_vector = c(AIC(mod1), AIC(mod2), AIC(mod3), AIC(mod4), AIC(mod5),
AIC(mod6), AIC(mod7), AIC(mod8), AIC(mod9), AIC(mod10),
AIC(mod11), AIC(mod12), AIC(mod13), AIC(mod14), AIC(mod15),
AIC(mod16))
plot(AIC_vector, xlab = "Model index", ylab = "AIC", type = "b", pch = 16)
grid()
abline(h = min(AIC_vector), lty=2)
AIC_vector = c(AIC(mod1), AIC(mod2), AIC(mod3), AIC(mod4), AIC(mod5),
AIC(mod6), AIC(mod7), AIC(mod8), AIC(mod9), AIC(mod10),
AIC(mod11), AIC(mod12), AIC(mod13), AIC(mod14), AIC(mod15),
AIC(mod16))
plot(AIC_vector, xlab = "Model index", ylab = "AIC", type = "b", pch = 16)
grid()
abline(h = min(AIC_vector), lty=2)
abline(h = min(AIC_vector)+2, lty=2)
library(idar)
data("cortisol")
cortisol
?cortisol
library(idar)
data("bronchitis")
bronchitis
help("bronchitis")
help("bronchitis")
mod1 = glm(bron ~ cigs, data = bronchitis, family = binomial())
summary(mod1)
?predict.glm
library(idar)
data(bronchitis)
mod2 = glm(bron ~ cigs + poll, data = bronchitis, family = binomial())
mod2
# define number of fold
fold = 10
# define vector to save accuracy for each fold
cv_accuracy = vector(mode = "numeric", length = fold)
cv_accuracy
# define fold id vector
n <-  dim(bronchitis)[1]
prop <- n%/%fold
set.seed(123)
newseq <- rank(runif(n))
fold_id <- as.factor((newseq - 1)%/%prop + 1)
fold_id
table(fold_id)
fold_id
fold_i = 1
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
id_test
id_train
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
y_pred_test_bin
y_pred_test_bin
bronchitis[id_test, "bron"]
y_pred_test_bin == bronchitis[id_test, "bron"]
mean(y_pred_test_bin == bronchitis[id_test, "bron"])
# run cv procedure
for(fold_i in seq(fold)){
# identify id train and test
id_test = which(fold_id == fold_i)
id_train = which(!fold_id == fold_i)
# fit model on training and rate accuracy on test set
fit = glm(bron ~ cigs + poll, data = bronchitis[id_train, ], family = binomial())
y_pred_test = predict(fit, newdata = bronchitis[id_test, ], type = "response")
y_pred_test_bin = ifelse(y_pred_test > 0.5, 1,0)
# compute accuracy on test set
cv_accuracy[fold_i] = mean(y_pred_test_bin == bronchitis[id_test, "bron"])
}
cv_accuracy
# Compute estimated cv accuracy
mean(cv_accuracy)
