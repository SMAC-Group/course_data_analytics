}else if(matmaze[8-actual_pos[2]+1, actual_pos[1] == 0){
return(c(actual_pos[1], actual_pos[2]-1))
#space on left
}else if(matmaze[8-actual_pos[2]-1, actual_pos[1] == 0){
return(c(actual_pos[1], actual_pos[2]+1))
#space on left
}
}
else if(matmaze[7-actual_pos[1]-1, actual_pos[2]] == 0){
return(c(7-actual_pos[1]-1, actual_pos[2]))
}else{
return(c(actual_pos[1], actual_pos[2]-1))
}
}
matmaze[3,]
matmaze[1-2,2]
plot(matmaze)
new_pos(c(1,2), matmaze)
points(x=1,y=3, col = "blue")
plot(matmaze, col=c("white", "black"))
myposition = starting_pos
for(i in seq(5)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
new_pos = function(actual_pos, maze){
new_pos = function(actual_pos, maze){
new_pos = function(actual_pos, maze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}
}
new_pos(c(1,3), matmaze)
new_pos = function(actual_pos, maze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}
}
new_pos(c(1,3), maze = matmaze)
matmaze
actual_pos[1]
actual_pos
matmaze[8-actual_pos[2]+1, actual_pos[1] ]
new_pos = function(actual_pos, maze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}else if(matmaze[8-actual_pos[2]+1, actual_pos[1] ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
}
}
new_pos(c(1,3), maze = matmaze)
new_pos(c(2,3), maze = matmaze)
new_pos(c(3,3), maze = matmaze)
matmaze
plot(matmaze)
library(plot.matrix)
maze =
c(c(rep(1,7)),
c(1,0,0,0,1,0,1),
c(1,0,1,0,1,0,1),
c(1,0,1,0,1,0,0),
c(0,0,1,0,1,0,1),
c(1,0,1,0,0,0,1),
c(rep(1,7)))
matmaze = matrix(maze, ncol=7, byrow = T, )
plot(matmaze, col=c("white", "black"))
actual_pos
new_pos(c(1,3), maze = matmaze)
actual_pos
new_pos(c(3,3), maze = matmaze)
new_pos(c(2,3), maze = matmaze)
actual_pos=c(2,3)
matmaze
8-actual_pos[2]
actual_pos[1]+1
8-actual_pos[2]+1
actual_pos[1]
actual_pos[2]
TRUE!=FALSE
TRUE!=TRUE
library(plot.matrix)
maze =
c(c(rep(1,7)),
c(1,0,0,0,1,0,1),
c(1,0,1,0,1,0,1),
c(1,0,1,0,1,0,0),
c(0,0,1,0,1,0,1),
c(1,0,1,0,0,0,1),
c(rep(1,7)))
matmaze = matrix(maze, ncol=7, byrow = T, )
plot(matmaze, col=c("white", "black"))
points(2,3)
points(1,3)
matmaze
plot(matmaze, col=c("white", "black"))
points(1,3)
starting_pos = c(1,3)
points(x=starting_pos[1], y=starting_pos[2])
matmaze
matmaze
8-actual_pos[2]
actual_pos[1]+1
actual_pos[1]
actual_pos=starting_pos
actual_pos[1]+1
matmaze[8-actual_pos[2], actual_pos[1]+1 ]
actual_pos[1]+1
actual_pos[2]
8-actual_pos[2]+1
actual_pos[1]
actual_pos[1]
actual_pos[2]
matmaze[8-actual_pos[2]+1, actual_pos[1] ]
actual_pos
actual_pos[1]+1
actual_pos[2]-1
actual_pos[1],
actual_pos
actual_pos[2]-1
actual_pos
new_pos = function(actual_pos, matmaze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}else if(matmaze[8-actual_pos[2]+1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]-1))
#left
}else if(matmaze[8-actual_pos[2]-1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]+1))
}
}
new_pos(c(2,3), maze = matmaze)
new_pos(c(2,3), matmaze =  = matmaze)
new_pos(c(2,3), matmaze =  matmaze)
new_pos(c(2,2), matmaze =  matmaze)
new_pos(c(2,3), matmaze =  matmaze)
return(c(actual_pos[1], actual_pos[2]+1))
new_pos = function(actual_pos, matmaze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}else if(matmaze[8-actual_pos[2]-1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]+1))
}else if(matmaze[8-actual_pos[2]+1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]-1))
}
#left
}
new_pos(c(2,3), matmaze =  matmaze)
new_pos(c(2,4), matmaze =  matmaze)
plot(matmaze, col=c("white", "black"))
myposition = starting_pos
for(i in seq(5)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
for(i in seq(10)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
myposition = starting_pos
for(i in seq(10)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
starting_pos
myposition = starting_pos
for(i in seq(20)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
new_pos(c(4,3))
new_pos(c(4,3), matmaze = matmaze)
new_pos(c(4,4), matmaze = matmaze)
new_pos(c(4,5), matmaze = matmaze)
new_pos(c(4,6), matmaze = matmaze)
new_pos(c(3,6), matmaze = matmaze)
new_pos(c(4,6), matmaze = matmaze)
new_pos(c(4,5), matmaze = matmaze)
actual_pos=c(4,5)
(matmaze[8-actual_pos[2], actual_pos[1]+1 ]
)
matmaze[8-actual_pos[2], actual_pos[1]+1 ]
actual_pos
8-actual_pos[2]
matmaze
new_pos(c(4,5), matmaze = matmaze)
actual_pos[1]+1
8-actual_pos[2]-1
actual_pos
8-actual_pos[2]
actual_pos[1]
matmaze[8-actual_pos[2]+1, actual_pos[1] ] == 0
actual_pos[1]
actual_pos[2]+1
actual_pos[2]-1
actual_pos
actual_pos[2]
8-actual_pos[2]
new_pos = function(actual_pos, matmaze){
#if space in front
if(matmaze[8-actual_pos[2], actual_pos[1]+1 ] == 0){
return(c(actual_pos[1]+1, actual_pos[2]))
#space on right
}else if(matmaze[8-actual_pos[2]+1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]-1))
}else if(matmaze[8-actual_pos[2]-1, actual_pos[1] ] == 0){
return(c(actual_pos[1], actual_pos[2]+1))
}
#left
}
new_pos(c(2,4), matmaze =  matmaze)
plot(matmaze)
matmaze[3,]
matmaze[1-2,2]
plot(matmaze)
new_pos(c(1,3), matmaze)
points(x=1,y=3, col = "blue")
plot(matmaze, col=c("white", "black"))
myposition = starting_pos
for(i in seq(20)){
print(paste("Iteration ",i ))
points(x = myposition[1], y = myposition[2], col = "red")
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
}
myposition = starting_pos
next_position = new_pos(actual_pos = myposition, matmaze)
next_position
myposition = next_position
next_position = new_pos(actual_pos = myposition, matmaze)
next_position
next_position = new_pos(actual_pos = myposition, matmaze)
next_position
myposition = next_position
next_position
next_position = new_pos(actual_pos = myposition, matmaze)
next_position
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
myposition
next_position = new_pos(actual_pos = myposition, matmaze)
myposition = next_position
myposition
actual_pos
actual_pos = c(2,2)
matmaze[8-actual_pos[2]+1, actual_pos[1]
]
install.packages("gamair")
library(gamair)
data("hubble")
hubble
plot(hubble$x,hubble$y)
matmaze
colnames(matmaze)=seq(7)
matmaze
colnames(matmaze)=rev(seq(7))
matmaze
matmaze
colnames(matmaze)=(seq(7))
matmaze
rownames(matmaze)=rev(seq(7))
matmaze
matmaze[4,4]
matmaze=seq(49, ncol=7)
matmaze=matrix(seq(49, ncol=7))
matmaze= matrix(seq(49), ncol=7))
matmaze= matrix(seq(49), ncol=7)
matmaze
matmaze= matrix(seq(49), ncol=7)
colnames(matmaze)=(seq(7))
rownames(matmaze)=rev(seq(7))
matmaze
matmaze[4,4]
matmaze[1,3]
matmaze["1",3]
matmaze["1","3"]
matmaze[1,3]
matmaz[1][2]
matmaze[1][2]
matmaze["1",3]
matmaze
mysearch = function(actual_position, matmaze){
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
if(matmaze[xpos,ypos]==2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
print(paste("Visiting ", c(xpos,ypos)))
if((xpos < dim(matmaze)[1]-1 & mysearch(xpos+1,ypos)) |
(ypos > 0 & mysearch(xpos, ypos-1)) |
(xpos > 0 & mysearch(xpos-1, ypos)) |
(ypos < dim(matmaze)[1]-1 & mysearch(xpos, ypos+1))
){
return(True)
}{return(False)
}
}
mysearch = function(actual_position, matmaze){
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
if(matmaze[xpos,ypos]==2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
print(paste("Visiting ", c(xpos,ypos)))
if((xpos < dim(matmaze)[1]-1 & mysearch(xpos+1,ypos)) |
(ypos > 0 & mysearch(xpos, ypos-1)) |
(xpos > 0 & mysearch(xpos-1, ypos)) |
(ypos < dim(matmaze)[1]-1 & mysearch(xpos, ypos+1))
){return(True)}
{return(False)}
}
#https://www.laurentluce.com/posts/solving-mazes-using-python-simple-recursivity-and-a-search/
maze =
c(c(rep(1,7)),
c(1,0,0,0,1,0,1),
c(1,0,1,0,1,0,1),
c(1,0,1,0,1,0,2),
c(0,0,1,0,1,0,1),
c(1,0,1,0,0,0,1),
c(rep(1,7)))
matmaze = matrix(maze, ncol=7, byrow = T, )
colnames(matmaze)=(seq(7))
rownames(matmaze)=rev(seq(7))
mysearch(1,1, matmaze = matmaze)
mysearch(starting_pos, matmaze = matmaze)
actual_position
actual_pos=starting_pos
mysearch(actual_pos, matmaze = matmaze)
actual_position
actual_position=starting_pos
matmaze
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
xpos
ypos
if(matmaze[xpos,ypos]==2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
matmaze[xpos,ypos]==2
matmaze[xpos,ypos]
actual_position
matmaze[xpos,ypos]==1
matmaze[xpos,ypos]
matmaze
xpos
matmaze[xpos, 3]
matmaze["1",3]
matmaze= matrix(seq(49), ncol=7)
colnames(matmaze)=(seq(7))
rownames(matmaze)=rev(seq(7))
matmaze
matmaze["1",3]
matmaze
matmaze[1,5]
matmaze["1",3]
matmaze[1,5]
matmaze[xpos, ypos]
matmaze
actual_position
xpos
mysearch(xpos+1,ypos)
mysearch = function(actual_position, matmaze){
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
if(matmaze[xpos,ypos]==2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
print(paste("Visiting ", c(xpos,ypos)))
if((xpos < dim(matmaze)[1]-1 & mysearch(xpos+1,ypos)) |
(ypos > 0 & mysearch(xpos, ypos-1)) |
(xpos > 0 & mysearch(xpos-1, ypos)) |
(ypos < dim(matmaze)[1]-1 & mysearch(xpos, ypos+1))
){return(True)}
{return(False)}
}
mysearch(c(1,4), matmaze = matmaze)
actual_position=c(7,4)
mysearch = function(actual_position, matmaze){
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
if(matmaze[xpos,ypos] == 2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
print(paste("Visiting ", c(xpos,ypos)))
if((xpos < dim(matmaze)[1]-1 & mysearch(xpos+1,ypos)) |
(ypos > 0 & mysearch(xpos, ypos-1)) |
(xpos > 0 & mysearch(xpos-1, ypos)) |
(ypos < dim(matmaze)[1]-1 & mysearch(xpos, ypos+1))
){return(True)}
{return(False)}
}
if(matmaze[xpos,ypos] == 2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
matmaze[xpos,ypos]
actual_position=c(7,4)
maze =
c(c(rep(1,7)),
c(1,0,0,0,1,0,1),
c(1,0,1,0,1,0,1),
c(1,0,1,0,1,0,2),
c(0,0,1,0,1,0,1),
c(1,0,1,0,0,0,1),
c(rep(1,7)))
matmaze = matrix(maze, ncol=7, byrow = T, )
mysearch = function(actual_position, matmaze){
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
if(matmaze[xpos,ypos] == 2){
print(paste("Found exit at ", c(xpos,ypos)))
return(TRUE)
}else if(matmaze[xpos,ypos]==1){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}else if(matmaze[xpos,ypos]==2){
print(paste("Wall at ", c(xpos,ypos)))
return(FALSE)
}
print(paste("Visiting ", c(xpos,ypos)))
if((xpos < dim(matmaze)[1]-1 & mysearch(xpos+1,ypos)) |
(ypos > 0 & mysearch(xpos, ypos-1)) |
(xpos > 0 & mysearch(xpos-1, ypos)) |
(ypos < dim(matmaze)[1]-1 & mysearch(xpos, ypos+1))
){return(True)}
{return(False)}
}
mysearch(c(1,4), matmaze = matmaze)
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
(matmaze[xpos,ypos]
)
ypos
xpos
matmaze
(matmaze[xpos,ypos]
)
matmaze[xpos,ypos]
xpos
ypos
matmaze[xpos,ypos]
matmaze = matrix(maze, ncol=7, byrow = T)
colnames(matmaze)=(seq(7))
rownames(matmaze)=rev(seq(7))
xpos = as.character(actual_position[1])
ypos = as.character(actual_position[2])
matmaze[xpos,ypos]
matmaze
xpos
ypos
matmaze[xpos,ypos]
(matmaze[ypos,xpos]
